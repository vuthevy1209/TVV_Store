<div class="container" style="padding-top: 20px">
    <div class="cart_inner">
        <div class="table-responsive">
            <table class="table">
                <thead>
                <tr>
                    <th scope="col">Product</th>
                    <th scope="col">Price</th>
                    <th scope="col" class="text-center">Quantity</th>
                    <th scope="col">Total</th>
                    <th scope="col">Actions</th>
                </tr>
                </thead>
                <tbody>
                {{#each products}}
                    <tr data-id="{{this.product.id}}" data-max-quantity="{{this.product.inventory_quantity}}">
                        <td>
                            <div class="media">
                                <div class="d-flex">
                                    <img src="{{this.product.image_urls.[0]}}" alt="{{this.product.name}}"
                                         style="width: 100px; height: 100px"/>
                                </div>
                                <div class="media-body">
                                    <p>{{this.product.name}}</p>
                                </div>
                            </div>
                        </td>
                        <td>
                            <h5>${{this.product.price}}</h5>
                        </td>
                        <td class="text-center">
                            <div class="product_count">
                                <div class="quantity-container d-flex justify-content-center align-items-center">
                                    <span class="input-number-decrement decrease-quantity" data-id="{{this.product.id}}"
                                          style="cursor: pointer; padding: 5px 10px; background-color: #007bff; color: white; border-radius: 5px; margin: 0 5px; transition: background-color 0.3s;">-</span>
                                    <input type="text" class="quantity-input input-number"
                                           value="{{this.product.quantity}}" min="0" max="{{this.product.inventory_quantity}}" readonly
                                           style="text-align: center; width: 50px;">
                                    <span class="input-number-increment increase-quantity" data-id="{{this.product.id}}"
                                          style="cursor: pointer; padding: 5px 10px; background-color: #007bff; color: white; border-radius: 5px; margin: 0 5px; transition: background-color 0.3s;">+</span>
                                </div>
                                <div class="error-message" style="color: red; display: none;">Quantity exceeds inventory</div>
                            </div>
                        </td>
                        <td>
                            <h5 class="currPrice">${{this.currPrice}}</h5>
                        </td>
                        <td>
                            <button class="btn btn-danger remove-product">Remove</button>
                        </td>
                    </tr>
                {{/each}}
                <tr>
                    <td></td>
                    <td></td>
                    <td>
                        <h5>Subtotal</h5>
                    </td>
                    <td>
                        <h5 id="cartTotalPrice">${{total}}</h5>
                    </td>
                </tr>
                </tbody>
            </table>
            <div class="checkout_btn_inner float-right">
                <a class="btn_1" href="/products" style="border: 1px solid transparent; margin-bottom: 20px;">
                    Continue Shopping
                </a>
                <a class="btn_1 checkout_btn" style="border: 1px solid transparent; margin-bottom: 20px;">
                    Proceed to checkout
                </a>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let debounceTimer;
        let accumulatedQuantities = {};

        document.querySelectorAll('.increase-quantity').forEach(button => {
            button.addEventListener('click', function () {
                const row = this.closest('tr');
                const productId = row.getAttribute('data-id');
                const quantityInput = row.querySelector('.input-number');
                const maxQuantity = parseInt(quantityInput.max);
                const errorMessage = row.querySelector('.error-message');

                let newQuantity = (accumulatedQuantities[productId] || parseInt(quantityInput.value)) + 1;

                if (newQuantity > maxQuantity) {
                    errorMessage.style.display = 'block';
                    return;
                } else {
                    errorMessage.style.display = 'none';
                }

                accumulatedQuantities[productId] = newQuantity;
                quantityInput.value = newQuantity;
                debounceUpdateCart();
            });
        });

        document.querySelectorAll('.decrease-quantity').forEach(button => {
            button.addEventListener('click', function () {
                const row = this.closest('tr');
                const productId = row.getAttribute('data-id');
                const quantityInput = row.querySelector('.input-number');
                const errorMessage = row.querySelector('.error-message');

                let newQuantity = Math.max(0, (accumulatedQuantities[productId] || parseInt(quantityInput.value)) - 1);

                if (newQuantity <= parseInt(quantityInput.max)) {
                    errorMessage.style.display = 'none';
                }

                accumulatedQuantities[productId] = newQuantity;
                quantityInput.value = newQuantity;
                debounceUpdateCart();
            });
        });

        document.querySelectorAll('.remove-product').forEach(button => {
            button.addEventListener('click', function () {
                const row = this.closest('tr');
                const productId = row.getAttribute('data-id');
                accumulatedQuantities[productId] = 0;
                debounceUpdateCart();
            });
        });

        document.querySelector('.checkout_btn').addEventListener('click', function () {
            fetch('/orders/checkout', {
                method: 'POST'
            }).then(response => response.json())
                    .then(data => {
                        console.log('Checkout response:', data);
                        window.location.href = '/orders';
                    }).catch(error => {
                console.error('Error:', error);
                alert('An error occurred while checking out.');
            });
        });

        function debounceUpdateCart() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                updateCart();
            }, 500); // Adjust the delay as needed
        }

        async function updateCart() {
            const currentQuantities = { ...accumulatedQuantities };

            try {
                const response = await fetch('/carts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ products: currentQuantities })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();

                if (data.message) {
                    swal("Success", data.message, "success");
                }

                for (const productId in currentQuantities) {
                    const productRow = document.querySelector(`tr[data-id="${productId}"]`);
                    if (productRow) {
                        productRow.querySelector('.currPrice').innerText = `$${data.result.newItemsTotalPrice[productId]}`;
                        if (currentQuantities[productId] === 0) {
                            productRow.remove();
                        }
                    }
                }
                document.getElementById('cartTotalPrice').innerText = `$${data.result.cartTotalPrice}`;
                document.getElementById('cartQuantityIcon').setAttribute('value', data.result.cartAmountOfItems);
            } catch (error) {
                console.error('Error:', error);
                swal("Error", error.message, "error");
            } finally {
                accumulatedQuantities = {};
                
            }
        }

        async function fetchCartQuantity() {
            fetch('/carts/amount-of-items', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('cartQuantityIcon').setAttribute('value', data.amountOfItems);
                console.log('Cart quantity:', data.amountOfItems);
            })
            .catch(error => {
                console.error('Error fetching cart quantity:', error);
            });
        }
    });
</script>

